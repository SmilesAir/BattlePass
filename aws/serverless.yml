# serverless.yml
service: battle-pass

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage, "development"}

  environment:
    EVENT_TABLE: ${self:service}-${self:provider.stage}-eventTable
    USER_TABLE: ${self:service}-${self:provider.stage}-userTable
    USER_LIST_TABLE: ${self:service}-${self:provider.stage}-userListTable
    PLAYER_TABLE: ${self:service}-${self:provider.stage}-playerTable
    PLAYER_ALIAS_TABLE: ${self:service}-${self:provider.stage}-playerAliasTable
    BATTLE_TABLE: ${self:service}-${self:provider.stage}-battleTable
    MATCH_TABLE: ${self:service}-${self:provider.stage}-matchTable
    CODE_TABLE: ${self:service}-${self:provider.stage}-codeTable
    DOMAIN_SUFFIX: smilesair-gitis
    SNS_TOPIC: ${self:service}-${self:provider.stage}-topic
    SNS_TOPIC_ARN: arn:aws:sns:${opt:region, self:provider.region}:#{AWS::AccountId}:${self:provider.environment.SNS_TOPIC}

  httpApi:
    payload: '2.0'
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

  # logs:
  #   httpApi: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_LIST_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PLAYER_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PLAYER_ALIAS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BATTLE_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MATCH_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CODE_TABLE}"
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: "${self:provider.environment.SNS_TOPIC_ARN}"


functions:
  setupNewEvent:
    handler: source/eventCommon.setupNewEvent
    events:
      - http:
          path: setupNewEvent/{eventName}
          method: post
          cors: true
  setupNewBracket:
    handler: source/eventCommon.setupNewBracket
    events:
      - http:
          path: setupNewBracket/{eventName}/bracket/{bracketName}
          method: post
          cors: true
  setupSetCurrentEvent:
    handler: source/eventCommon.setupSetCurrentEvent
    events:
      - http:
          path: setupSetCurrentEvent/{eventName}
          method: post
          cors: true
  setupSetCurrentBracket:
    handler: source/eventCommon.setupSetCurrentBracket
    events:
      - http:
          path: setupSetCurrentBracket/{eventName}/bracket/{bracketName}
          method: post
          cors: true
  setupSetCurrentBracketLocked:
    handler: source/eventCommon.setupSetCurrentBracketLocked
    events:
      - http:
          path: setupSetCurrentBracketLocked/{eventName}/bracket/{bracketName}/isLocked/{isLocked}
          method: post
          cors: true
  setupGetEvents:
    handler: source/eventCommon.setupGetEvents
    events:
      - http:
          path: setupGetEvents
          method: get
          cors: true
  setupGetEvent:
    handler: source/eventCommon.setupGetEvent
    events:
      - http:
          path: setupGetEvent/{eventName}
          method: get
          cors: true
  getCurrentEventInfo:
    handler: source/eventCommon.getCurrentEventInfo
    events:
      - http:
          path: getCurrentEventInfo
          method: get
          cors: true
  setCurrentMatch:
    handler: source/eventCommon.setCurrentMatch
    events:
      - http:
          path: setCurrentMatch/{eventName}/bracket/{bracketName}/matchId/{matchId}/player1Id/{player1Id}/player2Id/{player2Id}
          method: post
          cors: true
  updateMatchScore:
    handler: source/eventCommon.updateMatchScore
    events:
      - http:
          path: updateMatchScore/{eventName}/bracket/{bracketName}/matchId/{matchId}/player1Id/{player1Id}/player2Id/{player2Id}/ratingMatchId/{ratingMatchId}
          method: post
          cors: true
  getCurrentEventLeaderboard:
    handler: source/eventCommon.getCurrentEventLeaderboard
    events:
      - http:
          path: getCurrentEventLeaderboard/{eventName}
          method: get
          cors: true
  getPlayers:
    handler: source/eventCommon.getPlayers
    events:
      - http:
          path: getPlayers
          method: get
          cors: true
  addNewPlayer:
    handler: source/eventCommon.addNewPlayer
    events:
      - http:
          path: addNewPlayer/{alias}
          method: post
          cors: true
  addNewPlayerAlias:
    handler: source/eventCommon.addNewPlayerAlias
    events:
      - http:
          path: addNewPlayerAlias/{playerId}/alias/{alias}
          method: post
          cors: true
  addRatedMatch:
    handler: source/eventCommon.addRatedMatch
    events:
      - http:
          path: addRatedMatch/{player1Id}/player2Id/{player2Id}
          method: post
          cors: true
  addRatedBattle:
    handler: source/eventCommon.addRatedBattle
    events:
      - http:
          path: addRatedBattle/{matchId}/player1Id/{player1Id}/player2Id/{player2Id}/result/{result}
          method: post
          cors: true
  updatePlayerRatings:
    handler: source/eventCommon.updatePlayerRatings
    events:
      - http:
          path: updatePlayerRatings/{eventName}
          method: post
          cors: true
  getUserData:
    handler: source/userCommon.getUserData
    events:
      - httpApi:
          path: /getUserData
          method: get
          authorizer: serviceAuthorizer
  upgradeUser:
    handler: source/userCommon.upgradeUser
    events:
      - httpApi:
          path: /upgradeUser
          method: post
          authorizer: serviceAuthorizer
  updatePick:
    handler: source/userCommon.updatePick
    events:
      - httpApi:
          path: /updatePick/{eventName}/bracket/{bracketName}/matchId/{matchId}/wager/{wager}
          method: post
          authorizer: serviceAuthorizer
  collectRewards:
    handler: source/userCommon.collectRewards
    events:
      - httpApi:
          path: /collectRewards/{eventName}/displayName/{displayName}
          method: post
          authorizer: serviceAuthorizer
  redeemCode:
    handler: source/userCommon.redeemCode
    events:
      - httpApi:
          path: /redeemCode/{code}
          method: post
          authorizer: serviceAuthorizer
  setupCreateCode:
    handler: source/userCommon.setupCreateCode
    events:
      - httpApi:
          path: /setupCreateCode/{eventName}/code/{code}
          method: post
          authorizer: serviceAuthorizer
  sendCheer:
    handler: source/userCommon.sendCheer
    events:
      - httpApi:
          path: /sendCheer/{eventName}/displayName/{displayName}/playerIndex/{playerIndex}/type/{type}
          method: post
          authorizer: serviceAuthorizer

resources:
  Resources:
    eventTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EVENT_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userListTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_LIST_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    playerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PLAYER_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    playerAliasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PLAYER_ALIAS_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    battleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BATTLE_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    matchTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MATCH_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    codeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CODE_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    HttpApi:
      DependsOn: serviceUserPool
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${opt:stage, self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs:
          - https://www.tinyroomchallenge.com
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: serviceUserPool
        Domain: ${self:service}-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
    snsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: SNS Topic
        TopicName: ${self:provider.environment.SNS_TOPIC}

custom:
  autoscaling:
    - table: eventTable
      read:
        minimum: 1
        maximum: 100
        usage: .75
      write:
        minimum: 1
        maximum: 100
        usage: .75
    - table: userTable
      read:
        minimum: 1
        maximum: 100
        usage: .75
      write:
        minimum: 1
        maximum: 100
        usage: .75
    - table: playerTable
      read:
        minimum: 1
        maximum: 100
        usage: .75
      write:
        minimum: 1
        maximum: 100
        usage: .75
    - table: playerAliasTable
      read:
        minimum: 1
        maximum: 100
        usage: .75
      write:
        minimum: 1
        maximum: 100
        usage: .75
    - table: battleTable
      read:
        minimum: 1
        maximum: 100
        usage: .75
      write:
        minimum: 1
        maximum: 100
        usage: .75
    - table: matchTable
      read:
        minimum: 1
        maximum: 100
        usage: .75
      write:
        minimum: 1
        maximum: 100
        usage: .75

plugins:
  - serverless-plugin-dynamo-autoscaling
  - serverless-pseudo-parameters
