# serverless.yml
service: battle-pass

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage, "development"}

  environment:
    EVENT_TABLE: ${self:service}-${self:provider.stage}-eventTable
    USER_TABLE: ${self:service}-${self:provider.stage}-userTable
    DOMAIN_SUFFIX: smilesair-gitis

  httpApi:
    payload: '2.0'
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

  logs:
    httpApi: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_TABLE}"

functions:
  setupNewEvent:
    handler: source/eventCommon.setupNewEvent
    events:
      - http:
          path: setupNewEvent/{eventName}
          method: post
          cors: true
  setupSetCurrentEvent:
    handler: source/eventCommon.setupSetCurrentEvent
    events:
      - http:
          path: setupSetCurrentEvent/{eventName}
          method: post
          cors: true
  setupGetEvents:
    handler: source/eventCommon.setupGetEvents
    events:
      - http:
          path: setupGetEvents
          method: get
          cors: true
  setupGetEvent:
    handler: source/eventCommon.setupGetEvent
    events:
      - http:
          path: setupGetEvent/{eventName}
          method: get
          cors: true
  getCurrentEventInfo:
    handler: source/eventCommon.getCurrentEventInfo
    events:
      - http:
          path: getCurrentEventInfo
          method: get
          cors: true
  setCurrentMatch:
    handler: source/eventCommon.setCurrentMatch
    events:
      - http:
          path: setCurrentMatch/{eventName}/matchId/{matchId}
          method: post
          cors: true
  updateMatchScore:
    handler: source/eventCommon.updateMatchScore
    events:
      - http:
          path: updateMatchScore/{eventName}/matchId/{matchId}
          method: post
          cors: true
  getUserData:
    handler: source/userCommon.getUserData
    events:
      - httpApi:
          path: /getUserData
          method: get
          authorizer: serviceAuthorizer
  upgradeUser:
    handler: source/userCommon.upgradeUser
    events:
      - httpApi:
          path: /upgradeUser
          method: post
          authorizer: serviceAuthorizer

resources:
  Resources:
    eventTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EVENT_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    HttpApi:
      DependsOn: serviceUserPool
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${opt:stage, self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs:
          - https://www.tinyroomchallenge.com
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: serviceUserPool
        Domain: ${self:service}-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}

custom:
  autoscaling:
    - table: eventTable
      read:
        minimum: 1
        maximum: 100
        usage: .75
      write:
        minimum: 1
        maximum: 100
        usage: .75
    - table: userTable
      read:
        minimum: 1
        maximum: 100
        usage: .75
      write:
        minimum: 1
        maximum: 100
        usage: .75